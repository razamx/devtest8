FROM ubuntu:20.04
LABEL description="Ubuntu 20.04 image to use as base for the TCC build environment."

# ############################################################################

# TODO: Add acipca-tools package to the Dockerfile, needed for target builds.


# ############################################################################

RUN echo "http_proxy=http://proxy-chain.intel.com:911/" >>/etc/environment
RUN echo "HTTP_PROXY=http://proxy-chain.intel.com:911/" >>/etc/environment
RUN echo "https_proxy=http://proxy-chain.intel.com:912/" >>/etc/environment
RUN echo "HTTPS_PROXY=http://proxy-chain.intel.com:912/" >>/etc/environment
RUN echo "no_proxy=localhost,127.0.0.1/8,::1,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,134.134.0.0/16,148.183.0.0/16,163.33.0.0/16,192.198.0.0/16" >>/etc/environment
RUN echo "NO_PROXY=localhost,127.0.0.1/8,::1,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,134.134.0.0/16,148.183.0.0/16,163.33.0.0/16,192.198.0.0/16" >>/etc/environment

ARG DEBIAN_FRONTEND=noninteractive
ARG DEBCONF_NOWARNINGS="yes"
RUN apt-get -y update
RUN apt-get -y upgrade
# RUN rm -rf /var/lib/apt/lists/*
# RUN apt-get clean


# ############################################################################

# Create a non-root user to be used inside Docker.
# see: https://code.visualstudio.com/remote/advancedcontainers/add-nonroot-user

# TODO: Investigate usage of new Docker "rootless" mode of operation.
# see: https://docs.docker.com/engine/security/rootless/

ARG USERNAME=user
ENV USERNAME=${USERNAME}
ARG USER_UID=1000
ENV USER_UID=${USER_UID}
ARG USER_GID=${USER_UID}
ENV USER_GID=${USER_GID}

# Create a non-root user.
RUN groupadd --gid ${USER_GID} ${USERNAME}
RUN useradd --uid ${USER_UID} --gid ${USER_GID} -m ${USERNAME}

# WORKDIR needs to be an absolute reference
ENV WORK_DIR=/home/${USERNAME}
WORKDIR ${WORK_DIR}

# Add sudo support.
# Only needed if we need to install software when the container is started.
RUN apt-get -y update
RUN apt-get -y install sudo
RUN echo ${USERNAME} ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/${USERNAME}
RUN chmod 0440 /etc/sudoers.d/${USERNAME}
# RUN rm -rf /var/lib/apt/lists/*
# RUN apt-get clean


# ############################################################################

# Downloading necessary packages
RUN apt-get -y update && \
    apt-get -y upgrade && \
    apt-get -y install \
    apt-utils \
    autoconf \
    automake \
    bandit \
    checkinstall \
    clang-tidy-8 \
    cmake \
    connect-proxy \
    csh \
    curl \
    dblatex \
    debhelper \
    debmake \
    default-jre \
    dmidecode \
    docbook-utils \
    dos2unix \
    doxygen \
    expect \
    g++-9 \
    g++-9-multilib \
    gcc-9 \
    gcovr \
    gettext \
    git \
    git-lfs \
    graphviz \
    jq \
    clang-format-8 \
    libglib2.0-dev \
    libjson-c-dev \
    libncurses5-dev \
    libncursesw5-dev \
    libtool \
    make \
    mc \
    nano \
    net-tools \
    p7zip-full \
    patchutils \
    pkg-config \
    python-is-python3 \
    python3-pip \
    python3.8 \
    ssh \
    sshpass \
    sudo \
    tar \
    vim \
    wget \
    xmlto \
    xsltproc \
    xutils-dev


# Update git-lfs
RUN curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash
RUN apt-get -y update
RUN apt-get -y install git-lfs

# Install XDP support libs
RUN apt-get -y update && \
    apt-get -y install \
    python3-sphinx \
    pkg-config \
    libelf-dev


# ############################################################################

# Set required Python modules
RUN echo '\n\
## Tools prerequisites ##\n\
##### PREREQUISITES for DSO and CC #####\n\
##### sbl #####\n\
lz4\n\
##### common #####\n\
transitions >= 0.8.1, == 0.8.*\n\
## Samples prerequisites ##\n\
matplotlib >= 3.1.2, == 3.1.*\n\
numpy\n\
## siip tool ##\n\
cryptography\n\
click\n\
## Other ##\n\
xmlrunner\n\
unittest-xml-reporting\n\
robotframework\n\
robotframework-sshlibrary\n\
flake8\n\
junit2html\n\
bandit\n\
coverage\n'\
>> python_prereqs.txt

# Install required Python modules
RUN pip3 install -r python_prereqs.txt && rm python_prereqs.txt


# ############################################################################

# Install ittnotify
RUN git clone -b v3.18.10 https://github.com/intel/ittapi
RUN cd ittapi && python3 buildall.py
RUN cd ittapi && \
    cp build_linux/64/bin/libittnotify.a /usr/lib && \
    cp -r include /usr/include/ittnotify && \
    cp src/ittnotify/*.h /usr/include/ittnotify/ && \
    rm -rf /usr/include/ittnotify/fortran/win32 && \
    rm -rf /usr/include/ittnotify/fortran/posix/x86
#RUN cd .. && rm -rf ittapi


# ############################################################################

# Install EDKII dependencies
RUN apt-get -y update && \
    apt-get -y install \
    uuid-dev \
    iasl \
    nasm


# ############################################################################

# Download open62541 and libbpf patches
ENV OPEN62541_PATCHES_PATH=${WORK_DIR}/iotg-yocto-ese-main/recipes-connectivity/open62541/open62541-iotg/
ENV LIBBPF_PATCHES_PATH=${WORK_DIR}/iotg-yocto-ese-main/backports/dunfell/recipes-connectivity/libbpf/libbpf

RUN git clone https://github.com/intel/iotg-yocto-ese-main.git && \
    cd iotg-yocto-ese-main && \
    git checkout 56aceb22632b9451c991529889f8c90def22153e

# Clone libbpf
RUN git clone https://github.com/libbpf/libbpf.git && \
    cd libbpf && \
    git checkout ab067ed3710550c6d1b127aac6437f96f8f99447

# Patch libbpf
RUN cd libbpf && \
    git apply ${LIBBPF_PATCHES_PATH}/0001-libbpf-add-txtime-field-in-xdp_desc-struct.patch  && \
    git apply ${LIBBPF_PATCHES_PATH}/0002-makefile-don-t-preserve-ownership-when-installing-fr.patch  && \
    git apply ${LIBBPF_PATCHES_PATH}/0003-makefile-remove-check-for-reallocarray.patch

# Build libbpf
RUN cd libbpf/src && \
    make

# Install libbpf
RUN cd libbpf/src && checkinstall -D --pkgname=libbpf -y
RUN cd libbpf/src && make install_uapi_headers
RUN cp libbpf/include/uapi/linux/*.h /usr/include/linux/

# Clone open62541
RUN git clone https://github.com/open62541/open62541.git && \
    cd open62541 && \
    git checkout a77b20ff940115266200d31d30d3290d6f2d57bd

# Patch open62541
RUN cd open62541 && \
    git apply ${OPEN62541_PATCHES_PATH}/0001-CMakeLists.txt-Mark-as-IOTG-fork.patch && \
    git apply ${OPEN62541_PATCHES_PATH}/0001-fix-PubSub-Enable-dynamic-compilation-of-pubsub-exam.patch && \
    git apply ${OPEN62541_PATCHES_PATH}/0002-feature-PubSub-Use-libbpf-for-AF_XDP-receive-update-.patch && \
    git apply ${OPEN62541_PATCHES_PATH}/0003-feature-PubSub-add-support-for-AF_XDP-transmission.patch && \
    git apply ${OPEN62541_PATCHES_PATH}/0004-fix-PubSub-XDP-dynamic-compilation.patch && \
    git apply ${OPEN62541_PATCHES_PATH}/0005-fix-PubSub-update-example-to-set-XDP-queue-flags.patch && \
    git apply ${OPEN62541_PATCHES_PATH}/0006-test-PubSub-Configuration-used-for-compile-test.patch && \
    git apply ${OPEN62541_PATCHES_PATH}/0007-feature-PubSub-Add-ETF-LaunchTime-support-for-XDP-tr.patch && \
    git apply ${OPEN62541_PATCHES_PATH}/0008-fix-PubSub-AF_XDP-RX-release-mechanism-AF_PACKET-com.patch && \
    git apply ${OPEN62541_PATCHES_PATH}/0009-fix-PubSub-Fix-ETF-XDP-plugin-buffer-overflow.patch && \
    git apply ${OPEN62541_PATCHES_PATH}/0010-fix-PubSub-xdp-socket-cleanup-routine.patch && \
    git apply ${OPEN62541_PATCHES_PATH}/0011-fix-PubSub-fix-null-checking-possible-memleak-klocwo.patch && \
    git apply ${OPEN62541_PATCHES_PATH}/0012-fix-PubSub-remove-hardcoded-etf-layer-receive-timeou.patch

# Build open62541
RUN cd open62541 && \
    mkdir build && \
    cd build && \
    cmake -DUA_ENABLE_PUBSUB=ON -DUA_ENABLE_PUBSUB_ETH_UADP=ON -DUA_ENABLE_PUBSUB_ETH_UADP_ETF=ON -DUA_ENABLE_PUBSUB_ETH_UADP_XDP=ON -DUA_ENABLE_SUBSCRIPTIONS=ON -DUA_ENABLE_PUBSUB_SOCKET_PRIORITY=ON -DUA_ENABLE_PUBSUB_CUSTOM_PUBLISH_HANDLING=ON -DUA_ENABLE_PUBSUB_SOTXTIME=ON -DUA_ENABLE_SCHEDULED_SERVER=ON -DUA_BUILD_EXAMPLES=OFF -DUA_ENABLE_AMALGAMATION=OFF -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr/ ..

# Install open62541
RUN cd open62541/build && \
    checkinstall -D --pkgname=open62541-iotg -y

# Clean apt
RUN rm -rf /var/lib/apt/lists/*
RUN apt-get clean


# ############################################################################

# Set the default user.
USER ${USERNAME}
RUN cd && sudo chown user:user *

ENTRYPOINT ["/bin/bash"]
